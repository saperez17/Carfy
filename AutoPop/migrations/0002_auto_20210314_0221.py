# Generated by Django 3.1.6 on 2021-03-14 07:21

import AutoPop.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('AutoPop', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomerPublication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('longitude', models.DecimalField(decimal_places=6, default=-76.606422, max_digits=9)),
                ('latitude', models.DecimalField(decimal_places=6, default=2.44165, max_digits=9)),
                ('photo', models.ImageField(default=AutoPop.models.get_random_name, upload_to='images/publication_images', verbose_name='Optional Image')),
            ],
        ),
        migrations.CreateModel(
            name='ServiceCoverage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coverage', models.CharField(choices=[('OC', 'OIL CHANGE'), ('OFC', 'FILTER CHANGE'), ('AIF', 'AIR_FILTER_CHANGE'), ('WB', 'WIPER BLADE REPLACEMENT'), ('TR', 'TIRE FIXING'), ('PW', 'PAINT WORK'), ('TA', 'PROFESSIONAL TECHNICAL ASSISTANCE'), ('MA', 'SCHEDULED MAINTENANCE'), ('CW', 'CAR WASHING'), ('BW', 'BRAKE WORK'), ('ETU', 'ENGINE TUNE UP'), ('WW', 'WHEELS ALIGNED/BALANCED'), ('NN', 'NO SERVICE LISTED')], default='NN', max_length=3)),
            ],
        ),
        migrations.CreateModel(
            name='ShopService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=0, max_digits=10, verbose_name='Service Price')),
            ],
        ),
        migrations.CreateModel(
            name='UserApp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=24, unique=True)),
                ('city', models.CharField(blank=True, max_length=1023, null=True, verbose_name='City')),
                ('country', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
            ],
            options={
                'ordering': ['username'],
            },
        ),
        migrations.CreateModel(
            name='UserAdminApp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='user',
            name='groups',
        ),
        migrations.RemoveField(
            model_name='user',
            name='user_permissions',
        ),
        migrations.AddField(
            model_name='shop',
            name='latitude',
            field=models.DecimalField(decimal_places=6, default=2.449903, max_digits=9),
        ),
        migrations.AddField(
            model_name='shop',
            name='longitude',
            field=models.DecimalField(decimal_places=6, default=-76.585664, max_digits=9),
        ),
        migrations.DeleteModel(
            name='Service',
        ),
        migrations.DeleteModel(
            name='User',
        ),
        migrations.AddField(
            model_name='shopservice',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shop_services', to='AutoPop.shop'),
        ),
        migrations.AddField(
            model_name='shopservice',
            name='target_automobile',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_services', to='AutoPop.automobile'),
        ),
        migrations.AddField(
            model_name='servicecoverage',
            name='shop_offer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='available_services', to='AutoPop.shopservice'),
        ),
        migrations.AddField(
            model_name='customerpublication',
            name='publisher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='service_inquiry', to='AutoPop.userapp'),
        ),
    ]
